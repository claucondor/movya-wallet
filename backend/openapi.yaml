openapi: 3.0.0
info:
  title: Movya Wallet Backend API
  version: 1.0.0
  description: API for user authentication and wallet management with AI assistance.

servers:
  # Add your actual server URLs here (e.g., development, production)
  - url: http://localhost:8080 # Example local server
    description: Development server
  # - url: https://your-production-url.com
  #   description: Production server

paths:
  # Authentication (No wallet generation)
  /auth/login: # Replace with your actual login path
    post:
      summary: User Login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: # Or email, etc.
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Authentication successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Authentication successful.
                  token: # Example JWT token
                    type: string
        '401':
          description: Invalid credentials.
        '500':
          description: Server error during authentication.

  /agent/chat:
    post:
      summary: Chat with AI Wallet Assistant
      description: Send a message to the AI assistant and get a response with potential wallet actions
      tags:
        - AI Assistant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The user's message to the AI assistant
                  example: "Send 0.1 ETH to 0x123..."
                currentState:
                  type: object
                  description: The previous state of the conversation (null if starting new)
                  nullable: true
                  properties:
                    action:
                      type: string
                      enum: [SEND, CHECK_BALANCE, VIEW_HISTORY, CLARIFY, GREETING, ERROR]
                    parameters:
                      type: object
                      properties:
                        recipientEmail:
                          type: string
                          nullable: true
                        recipientAddress:
                          type: string
                          nullable: true
                        amount:
                          type: string
                          nullable: true
                        currency:
                          type: string
                          nullable: true
                    confirmationRequired:
                      type: boolean
                    confirmationMessage:
                      type: string
                      nullable: true
                    responseMessage:
                      type: string
              required:
                - message
      responses:
        '200':
          description: Successful response from the AI assistant
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseMessage:
                    type: string
                    description: The AI's response message to display to the user
                    example: "Sure! I'll help you send ETH. Please confirm the details..."
                  newState:
                    type: object
                    description: The new state to maintain conversation context
                    properties:
                      action:
                        type: string
                        enum: [SEND, CHECK_BALANCE, VIEW_HISTORY, CLARIFY, GREETING, ERROR]
                      parameters:
                        type: object
                        properties:
                          recipientEmail:
                            type: string
                            nullable: true
                          recipientAddress:
                            type: string
                            nullable: true
                          amount:
                            type: string
                            nullable: true
                          currency:
                            type: string
                            nullable: true
                      confirmationRequired:
                        type: boolean
                      confirmationMessage:
                        type: string
                        nullable: true
                      responseMessage:
                        type: string
                  actionDetails:
                    type: object
                    nullable: true
                    description: Details for actions that need to be executed by the frontend
                    properties:
                      type:
                        type: string
                        enum: [SEND_TRANSACTION, FETCH_BALANCE, FETCH_HISTORY]
                      recipientAddress:
                        type: string
                      recipientEmail:
                        type: string
                      amount:
                        type: string
                      currency:
                        type: string
        '400':
          description: Invalid request format or parameters
        '401':
          description: Unauthorized - Invalid or missing authentication token
        '500':
          description: Server error processing the message

  /agent/report_result:
    post:
      summary: Report Action Result to AI Assistant
      description: Sends the structured result of a frontend action (e.g., transaction status, balance fetched) back to the AI assistant to get a natural language response message.
      tags:
        - AI Assistant
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actionType:
                  type: string
                  enum: [SEND_TRANSACTION, FETCH_BALANCE, FETCH_HISTORY]
                  description: The type of action whose result is being reported.
                status:
                  type: string
                  enum: [success, failure]
                  description: Whether the action succeeded or failed.
                data:
                  type: object
                  description: Contains specific details about the result.
                  properties:
                    # Properties vary based on actionType and status
                    transactionHash:
                      type: string
                      description: Transaction hash (for successful SEND_TRANSACTION).
                      example: "0xabcdef..."
                    amountSent:
                      type: string
                      description: Amount sent (for successful SEND_TRANSACTION).
                      example: "0.1"
                    currencySent:
                      type: string
                      description: Currency sent (for successful SEND_TRANSACTION).
                      example: "ETH"
                    recipient:
                      type: string
                      description: Recipient address or email (for successful SEND_TRANSACTION).
                      example: "0x123..."
                    balance:
                      type: string
                      description: Fetched balance string (for successful FETCH_BALANCE).
                      example: "1.23 ETH"
                    history:
                      type: array
                      description: Array of transaction history objects (for successful FETCH_HISTORY).
                      items:
                        type: object
                        properties:
                          date: { type: string, format: date-time }
                          type: { type: string, enum: [sent, received] }
                          amount: { type: string }
                          recipientOrSender: { type: string }
                    errorCode:
                      type: string
                      description: Optional error code (for status=failure).
                    errorMessage:
                      type: string
                      description: Error message describing the failure (for status=failure).
                      example: "Insufficient funds"
              required:
                - actionType
                - status
                - data
      responses:
        '200':
          description: Successfully processed the result and generated a response message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseMessage:
                    type: string
                    description: The natural language message generated by the AI assistant to inform the user about the action result.
                    example: "Great news! Your transaction was successful."
        '400':
          description: Invalid request body format or missing required fields.
        '401':
          description: Unauthorized - Invalid or missing authentication token.
        '500':
          description: Server error processing the action result.

  # Añadir la especificación del endpoint de faucet
  /faucet:
    post:
      summary: Request Faucet Funds
      description: Request a small amount of native tokens (AVAX) for testing purposes
      tags:
        - Blockchain
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                network:
                  type: string
                  description: Blockchain network (fuji or mainnet)
                  enum: ['fuji', 'mainnet']
                address:
                  type: string
                  description: Recipient wallet address
                  example: '0x1234...'
                userId:
                  type: string
                  description: User ID from authentication
              required:
                - network
                - address
                - userId
      responses:
        '200':
          description: Faucet funds successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  txHash:
                    type: string
                    description: Transaction hash of the faucet transfer
                    example: '0x...'
                  message:
                    type: string
                    description: Success message
                    example: "Faucet funds successfully sent"
        '400':
          description: Invalid request (e.g., balance too high)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: "Address balance is too high to use faucet"
                  currentBalance:
                    type: string
                    description: Current balance of the address
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: "User not found"
        '429':
          description: Faucet cooldown period not elapsed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: "Faucet can only be used once every 24 hours"
                  lastFaucetUse:
                    type: string
                    format: date-time
                    description: Timestamp of last faucet use
        '500':
          description: Server error processing the faucet request

  # Añadir endpoints de wallet
  /wallet/address:
    post:
      summary: Save User Wallet Address
      description: Save or update a user's wallet address
      tags:
        - Wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID from authentication
                walletAddress:
                  type: string
                  description: Wallet address to save
                  example: '0x1234567890123456789012345678901234567890'
                network:
                  type: string
                  description: Blockchain network of the wallet
                  enum: ['ethereum', 'avalanche', 'polygon', 'other']
                type:
                  type: string
                  description: Type of wallet
                  enum: ['evm', 'solana', 'other']
              required:
                - userId
                - walletAddress
      responses:
        '200':
          description: Wallet address saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Wallet address saved successfully"
                  wallet:
                    type: object
                    properties:
                      address:
                        type: string
                        example: '0x1234567890123456789012345678901234567890'
                      network:
                        type: string
                        example: 'avalanche'
                      type:
                        type: string
                        example: 'evm'
        '400':
          description: Invalid wallet address or missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Wallet address is required"
        '500':
          description: Server error saving wallet address

  /wallet/address/{userId}:
    get:
      summary: Get User Wallet Address
      description: Retrieve a user's wallet address
      tags:
        - Wallet
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID to retrieve wallet address for
      responses:
        '200':
          description: Wallet address retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    example: '0x1234567890123456789012345678901234567890'
                  network:
                    type: string
                    example: 'avalanche'
                  type:
                    type: string
                    example: 'evm'
        '404':
          description: No wallet address found for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No wallet address found for this user"
        '500':
          description: Server error retrieving wallet address

  # Endpoints de Contactos
  /contacts/address:
    post:
      summary: Añadir contacto por dirección de wallet
      description: Añade un nuevo contacto usando una dirección de wallet
      tags:
        - Contacts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID del usuario que añade el contacto
                nickname:
                  type: string
                  description: Nickname único para el contacto
                address:
                  type: string
                  description: Dirección de wallet del contacto
              required:
                - userId
                - nickname
                - address
      responses:
        '201':
          description: Contacto añadido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contact added successfully"
                  contact:
                    $ref: '#/components/schemas/Contact'
        '400':
          description: Error en la solicitud (dirección inválida, etc.)
        '409':
          description: Nickname ya existe para este usuario

  /contacts/email:
    post:
      summary: Añadir contacto por email
      description: Añade un nuevo contacto usando un email de usuario registrado
      tags:
        - Contacts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: ID del usuario que añade el contacto
                nickname:
                  type: string
                  description: Nickname único para el contacto
                email:
                  type: string
                  description: Email del contacto
              required:
                - userId
                - nickname
                - email
      responses:
        '201':
          description: Contacto añadido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contact added successfully"
                  contact:
                    $ref: '#/components/schemas/Contact'
        '400':
          description: Error en la solicitud (email inválido, etc.)
        '404':
          description: No se encontró usuario con ese email
        '409':
          description: Nickname ya existe para este usuario

  /contacts/{userId}:
    get:
      summary: Obtener contactos de un usuario
      description: Recupera todos los contactos de un usuario
      tags:
        - Contacts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario
      responses:
        '200':
          description: Contactos recuperados exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  count:
                    type: integer
                    description: Número de contactos

  /contacts/{userId}/{nickname}:
    get:
      summary: Obtener contacto por nickname
      description: Recupera un contacto específico de un usuario por su nickname
      tags:
        - Contacts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario
        - in: path
          name: nickname
          required: true
          schema:
            type: string
          description: Nickname del contacto
      responses:
        '200':
          description: Contacto recuperado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '404':
          description: Contacto no encontrado

    delete:
      summary: Eliminar contacto
      description: Elimina un contacto de un usuario
      tags:
        - Contacts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID del usuario
        - in: path
          name: nickname
          required: true
          schema:
            type: string
          description: Nickname del contacto a eliminar
      responses:
        '200':
          description: Contacto eliminado exitosamente
        '404':
          description: Contacto no encontrado

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained after login/authentication.

tags:
  - name: Authentication
    description: User login and authentication management.
  - name: AI Assistant
    description: Interact with the AI wallet assistant for natural language transactions.
  - name: Blockchain
    description: Blockchain-related operations like faucet requests
  - name: Wallet
    description: Operations for managing user wallet addresses
  - name: Contacts
    description: Gestión de contactos de usuario 